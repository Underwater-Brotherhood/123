const express = require('express');
const axios = require('axios');
const cors = require('cors');

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
app.use(cors({
  origin: '*',
  methods: ['POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type']
}));

// –ü–∞—Ä—Å–∏–Ω–≥ JSON-—Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
app.use(express.json());

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
const validateEnv = () => {
  if (!process.env.BOT_TOKEN || !process.env.CHAT_ID) {
    console.error('ERROR: Missing required environment variables');
    process.exit(1);
  }
};
validateEnv();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö OPTIONS-–∑–∞–ø—Ä–æ—Å–æ–≤
app.options('*', (req, res) => {
  res.status(200).end();
});

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
app.post('/', async (req, res) => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!req.body || !req.body.name || !req.body.email || !req.body.comment) {
      return res.status(400).json({
        error: 'Missing required fields: name, email, comment'
      });
    }

    const { name, email, comment } = req.body;

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = `üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:
üë§ –ò–º—è: ${name}
üìß Email: ${email}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const telegramResponse = await axios.post(
      `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`,
      {
        chat_id: process.env.CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      },
      {
        timeout: 5000 // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
      }
    );

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(200).json({
      success: true,
      telegramId: telegramResponse.data.result.message_id
    });

  } catch (error) {
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    console.error('Error:', error.response?.data || error.message);
    
    const statusCode = error.response?.status || 500;
    const errorMessage = error.response?.data?.description 
      || 'Internal server error';

    res.status(statusCode).json({
      error: errorMessage,
      details: error.response?.data || {}
    });
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Vercel
module.exports = app;