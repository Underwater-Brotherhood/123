// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
// npm install express axios dotenv cors

require('dotenv').config(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const express = require('express');
const axios = require('axios');
const cors = require('cors'); // –î–æ–±–∞–≤–ª—è–µ–º CORS

const app = express();

// Middleware
app.use(cors()); // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.use(express.json()); // –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.urlencoded({ extended: true })); // –î–ª—è form-data

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!process.env.BOT_TOKEN || !process.env.CHAT_ID) {
  throw new Error('–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ CHAT_ID –≤ .env —Ñ–∞–π–ª–µ!');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
app.post('/send-to-telegram', async (req, res) => {
  try {
    const { name, email, comment } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !email || !comment) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `
      üöÄ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:
      üë§ –ò–º—è: ${name}
      üìß Email: ${email}
      üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const response = await axios.post(
      `https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`,
      {
        chat_id: process.env.CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      }
    );

    res.status(200).json({ 
      status: 'success',
      telegramResponse: response.data 
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.response?.data || error.message);
    res.status(500).json({ 
      error: 'Internal Server Error',
      details: error.response?.data || error.message 
    });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/healthcheck', (req, res) => {
  res.status(200).send('Server is running');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`BOT_TOKEN: ${process.env.BOT_TOKEN ? '***' : '–Ω–µ –∑–∞–¥–∞–Ω'}`);
  console.log(`CHAT_ID: ${process.env.CHAT_ID ? '***' : '–Ω–µ –∑–∞–¥–∞–Ω'}`);
});